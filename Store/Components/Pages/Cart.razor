@page "/cart"
@inject CartService CartService
@inject NavigationManager NavigationManager

<PageTitle>Cart - TinyShop</PageTitle>

<h1>Shopping Cart</h1>

@if (cartItems.Count == 0)
{
    <div class="empty-cart">
        <p>Your cart is empty.</p>
        <button class="btn btn-primary" @onclick="NavigateToProducts">Continue Shopping</button>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Subtotal</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in cartItems)
                {
                    <tr>
                        <td>
                            <div class="d-flex align-items-center">
                                <img src="@item.Product.ImageUrl" alt="@item.Product.Name" class="product-thumbnail me-3">
                                <div>
                                    <h5>@item.Product.Name</h5>
                                    <p class="text-muted small">@item.Product.Category</p>
                                </div>
                            </div>
                        </td>
                        <td>$@item.Product.Price.ToString("F2")</td>
                        <td>
                            <div class="quantity-control">
                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => DecreaseQuantity(item.Product.Id)">-</button>
                                <span class="mx-2">@item.Quantity</span>
                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => IncreaseQuantity(item.Product.Id)">+</button>
                            </div>
                        </td>
                        <td>$@((item.Product.Price * item.Quantity).ToString("F2"))</td>
                        <td>
                            <button class="btn btn-sm btn-danger" @onclick="() => RemoveFromCart(item.Product.Id)">
                                <i class="bi bi-trash"></i> Remove
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="3" class="text-end fw-bold">Total:</td>
                    <td class="fw-bold">$@CartService.GetTotalCost().ToString("F2")</td>
                    <td></td>
                </tr>
            </tfoot>
        </table>
    </div>

    <div class="d-flex justify-content-between mt-4">
        <button class="btn btn-secondary" @onclick="NavigateToProducts">Continue Shopping</button>
        <button class="btn btn-primary" @onclick="Checkout">Proceed to Checkout</button>
    </div>
}

@code {
    private IReadOnlyList<CartItem> cartItems = new List<CartItem>();

    protected override void OnInitialized()
    {
        cartItems = CartService.GetCartItems();
    }

    private void NavigateToProducts()
    {
        NavigationManager.NavigateTo("/products");
    }

    private void IncreaseQuantity(int productId)
    {
        var item = cartItems.FirstOrDefault(item => item.Product.Id == productId);
        if (item != null)
        {
            CartService.UpdateQuantity(productId, item.Quantity + 1);
            cartItems = CartService.GetCartItems();
        }
    }

    private void DecreaseQuantity(int productId)
    {
        var item = cartItems.FirstOrDefault(item => item.Product.Id == productId);
        if (item != null && item.Quantity > 1)
        {
            CartService.UpdateQuantity(productId, item.Quantity - 1);
            cartItems = CartService.GetCartItems();
        }
    }

    private void RemoveFromCart(int productId)
    {
        CartService.RemoveFromCart(productId);
        cartItems = CartService.GetCartItems();
    }

    private void Checkout()
    {
        // In a real application, this would navigate to a checkout page
        // For now, just clear the cart and show a message
        CartService.ClearCart();
        cartItems = CartService.GetCartItems();
    }
}